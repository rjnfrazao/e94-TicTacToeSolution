// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace RestClientSDKLibrary
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for RestClientSDKLibraryClient.
    /// </summary>
    public static partial class RestClientSDKLibraryClientExtensions
    {
            /// <summary>
            /// Execute the computer's move, based on a player's move.
            /// </summary>
            /// Sample request where computer stars playing.
            /// Post
            /// {
            /// "move": 2,
            /// "azurePlayerSymbol": "X",
            /// "humanPlayerSymbol": "O",
            /// "gameBoard": ["?","?","?","?","?","?","?","?","?"]
            /// }
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Status of the game, after the a player's move.
            /// </param>
            public static TicTacToeMoveResultDto ExecuteMove(this IRestClientSDKLibraryClient operations, TicTacToeMoveDto body = default(TicTacToeMoveDto))
            {
                return Task.Factory.StartNew(s => ((IRestClientSDKLibraryClient)s).ExecuteMoveAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute the computer's move, based on a player's move.
            /// </summary>
            /// Sample request where computer stars playing.
            /// Post
            /// {
            /// "move": 2,
            /// "azurePlayerSymbol": "X",
            /// "humanPlayerSymbol": "O",
            /// "gameBoard": ["?","?","?","?","?","?","?","?","?"]
            /// }
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Status of the game, after the a player's move.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TicTacToeMoveResultDto> ExecuteMoveAsync(this IRestClientSDKLibraryClient operations, TicTacToeMoveDto body = default(TicTacToeMoveDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteMoveWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
