Assignment-01 TicTatToe API
E-mail for Azure account + teams : ricardopadeiro@hotmail.com
Ricardo Frazao - rjnfrazao@gmail.com


* TicTacToe API  : http://rjnf-tictactoeapi.azurewebsites.net

* TicTacToe Web Application : http://rjnf-tictactoewebapp.azurewebsites.net/homepage.html



Solution Design
===============

API
    /Controllers/TicTacToeController : Controller for the end points.
    /Lib/AiComputer : Static class  which implements all logics and strategies performed by the computer to execute the move.
    /Lib/Game : Class which implements a round of the game (receive a move -> validate -> computer analysis -> returns computer move.
    /Lib/Rules : Class which implements some rules of the game that must be followed.
    /Lib/Library : Class used to store libraries of classes commonly used in the project.
    /Data/CodeTicTacToeRepo - Reporitory created trying to achieve the decouple between controller and repository.
    /Data/ITicTacToeRepo - Interface create to separate controller from repository. Decouple approach.
    /Models/Tictactoe - Model represententation of the game which is used internally.
    /DataObjects/TicTacToeMoveDto - Stores the classes which represents the data structured used externally, where you can find the structure of the move executed inbound and the result move response structures needed by the API.
    /DataObjectsMapping/TicTacToeMapping - Class used to apply the mapping between internal and external data structures, not sure if this was a good approach, considerin the small number of properties.

Javascrip Application
    HomePage.html - One page application with support of the javascript to render the game.
    /static/style.css - simple css for the interface.
    /static/index.js - Javascript with all functions required to execute the application.

    This application has a configuration "form", where you can define the symbols, who starts playing, and the end point to test the API. The default is my API, but you can test others.

ERROR Handling
===============

Code 101 : (Custom) 4.c.ii.3 Move must be in the range between 1..8
Code 102 : Case 4.b Azure and Human doesn't have oppositive symbols.
Code 103 : Case 4.c.i Not valid character being used in the game board.
Code 104 : (Custom) Case 4.c.ii.3 Player move in the wrong location, empty position (?) or opponent position.
Code 105 : Case 4.c.ii.1 Having unbalanced number of pieces between players.
Code 106 : Case 4.c.ii.2 Not having 9 elements.



Challenges during the assignment
================================

1) I added into the If Development Env, the following lines, this prevented me to create the SDK Client

            // ** Added to use the older 2.0 format so add rest client will work.
            app.UseSwagger(c => { c.SerializeAsV2 = true; });

            app.UseSwaggerUI(c => {
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "TicTacToeAPI v1");

                // Serve the Swagger UI at the app's root 
                // (http://localhost:<port>)
                c.RoutePrefix = string.Empty;
            });

2) I forgot the followiong lines into my controller file, this prevented shagger to add those directives into JSON file, this resulted into a different Class Object being used into my RestClientSDKLibraryClient, later I was struglling to assert the response for Bad Request, because it was an response of HttpOperationResponse<TicTacToeMoveResultDto> instead of HttpOperationResponse<object>.
        [ProducesResponseType(typeof(TicTacToeMoveResultDto), StatusCodes.Status200OK)]     // Tells swagger what the response format will be for a success message
        [ProducesResponseType(typeof(string), StatusCodes.Status400BadRequest)]                // Tells swagger that the response format will be an int for a BadRequest (400)

3) (Nice to have) I wasn't able to implement a friendly error message, sent back in the response together with the error code.

4) I wasn't able to implement the schema validation of the Json. I though it would be so simple, but all explanations in the internet were very complicated for a beginner like me with C# + JSON.

5) Every time any correction was implemented in the code, I had to recreate the Client SDK again to run the test.

6) I was so tired that I wasn't able to test the Functional Test in Azure, but everything was fine locally.

7) CORS was a big challenge. I took sometime to figure our how I could test my javascript application.

8) Javascript promisses Fetch function - Take time to recall how this works, this is not simple or intuitive as if then, loop, function, or classes.

 